//:==========================================================://
//:PUB._: PUBLIC_API (Public Contract)                (BELOW)://
//:----------------------------------------------------------://
//:PA:Public_API:(BELOW):------------------------------------://
//:PAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPA://

//:     1: GEP_Dec_Ode
//:     2: GEP_Enc_Ode
//:     3: GEP_Get_Wid
//:     4: GEP_Get_Hig
//:     5: GEP_Get_Nob
//:     6: GEP_Cop_Buf
//:     7: GEP_Del_Buf

//:PAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPA://

    //:Decodes a ".PNG file"  binary stored in a byte array,
    //:and stores the resulting RGBA [OpenGL/Vulkan] friendly
    //:pixel byte array in an internal buffer that can be
    //:copied over to user memory.
    const GEP_Dec_Ode=function( 
        png_bin //:Abbreviation: PNG:Portable_Network_Graphics
                //:Abbreviation: BIN:Binary (As Byte Array)
    ){
        gep_Dec( png_bin ); //:Private_Decode_Function

        return("[USE:GEP_Get_*:ToRetrieveOutputData]");
    };;

    //:Encodes an RGBA byte array representing an
    //:[ OpenGL / Vulkan ] friendly pixel array into
    //:a .PNG binary that can then be saved to file system
    //:or transmitted over the internet.
    const GEP_Enc_Cod=function( 
        ba4_hex //:Abbreviation: BA4:ByteArray4( 4==R,G,B,A )
                //:Abbreviation: HEX:HEXadecimal_values
    ){
        gep_Enc( ba4_hex ); //:Private_Decode_Function

        return("[USE:GEP_Get_*:ToRetrieveOutputData]");
    };;
    
    //: If GEP_Decode( png_bin ) has just been called,
    //: this returns the width in pixels of the image.
    //: If GEP_Encode( ba4_hex
    const GEP_Get_Wid=function(){

        //:Return internal buffer width (buf_wid)
        //:Width is measured in pixels.
        return( gep_buf_wid );

    };;
    const GEP_Get_Hig=function(){

        //:Return internal buffer height (buf_hig)
        //:Height is measured in pixels.
        return( gep_buf_hig );

    };;

    //:Get the number_of_bytes[ nob ]within the internal
    //:buffer generated by[ decode ]or[ encode ]functions.
    //:Array length is measured in[ nob ].
    const GEP_Get_Nob=function(){ 

        //:Return internal buffer number_of_bytes[ nob ]
        return( gep_buf_nob );
    
    };;

    //: Copies internal buffer into user allocated memory    ://
    //: pointed to by[ arr_oct ].The reason the[ decode ]    ://
    //: and[ encode ]functions do not return data is         ://
    //: because in order to make this portable to "C"        ://
    //: we need to think about memory management and         ://
    //: who is responsible for what memory.                  ://
    const GEP_Cop_Buf=function( 
        arr_oct //:Array_Of_Octets (Byte/Char Array)
    ,   arr_nob //:Number_Of_Bytes_In_Array( The Length )
    ){

        throw("[TODO:GEP_Cop_Buf:TODO]");

    };;

    //: GEP_Delete_Buffer: Deletes internal memory buffer    ://
    //: used to store[ ba4_hex ]or[ png_bin ]. You can       ://
    //: call this after calling[ GEP_Cop_Buf ]to free up     ://
    //: memory.                                              ://
    const GEP_Del_Buf=function( /** void **/ ){

        throw("[TODO:GEP_Del_Buf:TODO]");

    };;

//:PAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPA://
//:PA:Public_API:(ABOVE):------------------------------------://
//:----------------------------------------------------------://
//:PUB._: PUBLIC_API (Public Contract)                (ABOVE)://
//:==========================================================://